{"version":3,"sources":["components/GameBoard/Square.jsx","components/GameBoard/GameBoard.jsx","helperFunctions/calculateWinner.js","components/Sidebar/SideBar.jsx","components/Game/Game.jsx","components/Header/header.jsx","App.jsx","index.js"],"names":["Square","props","className","isHighlighted","onClick","value","GameBoard","style","numberOfColumnsAndRows","gridTemplateColumns","squareEl","i","y","secNum","winningSquares","console","log","iForPassing","yForPassing","push","squares","column","row","numberOfColumns","numberOfRows","renderSquares","calculateWinner","coords","potentialWinner","length","currentSquare","direction","winningCombination","matchedCircle","nextI","nextY","SideBar","useState","btnContent","asc","movesList","setMovesList","status","moves","history","map","move","step","desc","coordinates","key","btnBold","btnBoldIndex","reverse","renderMoves","Game","Array","fill","winners","currentWinner","stepNumber","greenIsNext","current","order","gameOver","gameState","setGameState","nextPlayer","coord","gameover","slice","arr","winningStatus","winner","concat","flat","every","el","previousState","handleClick","activeWinner","some","jumpTo","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa8fa8d2.chunk.js","sourcesContent":["import \"./Square.css\";\r\n\r\n//ðŸ”´ ðŸŸ¢\r\n\r\nfunction Square(props) {\r\n  let className = \"square regular\";\r\n\r\n  if (props.isHighlighted) {\r\n    className = \"square winning\";\r\n  }\r\n\r\n  return (\r\n    <div className={className} onClick={props.onClick}>\r\n      <div>{props.value}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import \"./GameBoard.css\";\r\nimport Square from \"./Square\";\r\n\r\nfunction GameBoard(props) {\r\n  let style = `repeat(${props.numberOfColumnsAndRows}, 0.01fr)`;\r\n\r\n  function renderSquares() {\r\n    let value = 0;\r\n    const squareEl = [];\r\n\r\n    for (let i = 0; i < props.numberOfRows; i++) {\r\n      for (let y = 0; y < props.numberOfColumns; y++) {\r\n        let secNum = value;\r\n        let isHighlighted = false;\r\n        if (props.winningSquares) {\r\n          if (\r\n            (i === props.winningSquares[0].i &&\r\n              y === props.winningSquares[0].y) ||\r\n            (i === props.winningSquares[1].i &&\r\n              y === props.winningSquares[1].y) ||\r\n            (i === props.winningSquares[2].i &&\r\n              y === props.winningSquares[2].y) ||\r\n            (i === props.winningSquares[3].i &&\r\n              y === props.winningSquares[3].y) ||\r\n            (i === props.winningSquares[4].i && y === props.winningSquares[4].y)\r\n          ) {\r\n            isHighlighted = true;\r\n            console.log(props.winningSquares[0].i);\r\n            console.log(props.winningSquares[0].y);\r\n          }\r\n        }\r\n        const iForPassing = i;\r\n        const yForPassing = y;\r\n\r\n        squareEl.push(\r\n          <Square\r\n            onClick={() => props.onClick({ secNum, i, y })}\r\n            key={value + \"square\"}\r\n            value={props.squares[iForPassing][yForPassing]}\r\n            column={y}\r\n            row={i}\r\n            isHighlighted={isHighlighted}\r\n            winningSquares={props.winningSquares}\r\n          ></Square>\r\n        );\r\n        value++;\r\n      }\r\n    }\r\n\r\n    return squareEl;\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"board-container\" style={{ gridTemplateColumns: style }}>\r\n        {renderSquares()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n","function calculateWinner(squares, coords, potentialWinner) {\r\n    const requiredMathing = 5;\r\n    const directions = [\r\n        [0, -1],\r\n        [1, -1],\r\n        [1, 0],\r\n        [1, 1],\r\n        [0, 1],\r\n        [-1, 1],\r\n        [-1, 0],\r\n        [-1, -1],\r\n    ];\r\n\r\n    const numberOfColumns = squares[0].length;\r\n    const numberOfRows = squares.length;\r\n\r\n    let currentSquare = { i: coords.i, y: coords.y };\r\n\r\n    for (const direction of directions) {\r\n        const winningCombination = [currentSquare];\r\n        for (\r\n            let matchedCircle = 1; matchedCircle <= requiredMathing; matchedCircle++\r\n        ) {\r\n            if (\r\n                currentSquare.i + direction[0] < 0 ||\r\n                currentSquare.i + direction[0] > numberOfRows - 1\r\n            ) {\r\n                break;\r\n            }\r\n\r\n            if (\r\n                currentSquare.y + direction[1] < 0 ||\r\n                currentSquare.y + direction[1] > numberOfColumns - 1\r\n            ) {\r\n                break;\r\n            }\r\n\r\n            const nextI = currentSquare.i + direction[0];\r\n            const nextY = currentSquare.y + direction[1];\r\n\r\n            if (squares[nextI][nextY] !== potentialWinner) {\r\n                break;\r\n            }\r\n\r\n            currentSquare = { i: nextI, y: nextY };\r\n            winningCombination.push(currentSquare);\r\n\r\n            if (winningCombination.length === requiredMathing) {\r\n                console.log(potentialWinner + \" is won!!!\");\r\n                console.log(winningCombination);\r\n\r\n                return [true, winningCombination];\r\n            }\r\n        }\r\n    }\r\n\r\n    return [false, false];\r\n}\r\n\r\nexport default calculateWinner;","import { useState } from \"react\";\r\nimport calculateWinner from \"../../helperFunctions/calculateWinner.js\";\r\n\r\nimport \"./SideBar.css\";\r\n\r\nfunction SideBar(props) {\r\n  const [movesList, setMovesList] = useState({\r\n    btnContent: \"Sort â†‘\",\r\n    asc: true,\r\n  });\r\n\r\n  function renderMoves() {\r\n    const moves = props.history.map((move, step) => {\r\n      const desc = step\r\n        ? `Go to move # ${step}: column: ${\r\n            props.coordinates[step].column + 1\r\n          }, row: ${props.coordinates[step].row + 1}`\r\n        : \"Go to the game start\";\r\n\r\n      const key = \"button\" + step;\r\n\r\n      const btnBold = props.btnBoldIndex;\r\n\r\n      return (\r\n        <li key={key}>\r\n          <button\r\n            className={btnBold === step ? \"bold\" : \"regular\"}\r\n            onClick={() => props.onClick(step)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    if (movesList.asc) {\r\n      return moves;\r\n    } else {\r\n      return moves.reverse();\r\n    }\r\n  }\r\n\r\n  // const nextPlayer = props.winnerObj.potentialWinner === \"ðŸŸ¢\" ? \"ðŸ”´\" : \"ðŸŸ¢\";\r\n  // const winner = calculateWinner(\r\n  //   props.winnerObj.squares,\r\n  //   props.winnerObj.coords,\r\n  //   props.winnerObj.potentialWinner\r\n  // );\r\n\r\n  // const gameStatus = winner\r\n  //   ? `Winner: ${winner}`\r\n  //   : `Next player: ${nextPlayer}`;\r\n\r\n  // console.log(gameStatus);\r\n  // console.log(props.nextPlayer);\r\n  // console.log(props.currentWinner);\r\n\r\n  function sorting() {\r\n    const btnContent = movesList.asc ? \"Sort  ðŸ — \" : \"Sort â†‘ \";\r\n    setMovesList({\r\n      btnContent: btnContent,\r\n      asc: !movesList.asc,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"status\">{props.status}</div>\r\n      <div className=\"history-section\">\r\n        <h2>History Section</h2>\r\n        <button className=\"sort-asc\" onClick={sorting} className=\"sort-btn\">\r\n          {movesList.btnContent}\r\n        </button>\r\n\r\n        <ol>{renderMoves()}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import { useState } from \"react\";\r\nimport GameBoard from \"../GameBoard/GameBoard\";\r\nimport \"./Game.css\";\r\nimport calculateWinner from \"../../helperFunctions/calculateWinner\";\r\nimport SideBar from \"../Sidebar/SideBar\";\r\nimport calculateDraw from \"../../helperFunctions/calculateDraw\";\r\n\r\nfunction Game() {\r\n  const numberOfColumns = 15;\r\n  const numberOfRows = 15;\r\n\r\n  const [gameState, setGameState] = useState({\r\n    history: [\r\n      {\r\n        squares: Array(numberOfRows).fill(Array(numberOfColumns).fill(null)),\r\n      },\r\n    ],\r\n\r\n    winners: [],\r\n    currentWinner: null,\r\n    stepNumber: 0,\r\n    greenIsNext: true,\r\n    current: {\r\n      squares: Array(numberOfRows).fill(Array(numberOfColumns).fill(null)),\r\n    },\r\n    coordinates: Array(1).fill(null),\r\n    btnBoldIndex: 0,\r\n    order: \"asc\",\r\n    status: `The player is  \"ðŸŸ¢\"`,\r\n    winningSquares: false,\r\n    gameOver: false,\r\n  });\r\n\r\n  let nextPlayer = gameState.greenIsNext ? \"ðŸŸ¢\" : \"ðŸ”´\";\r\n  let status = `The player is ${nextPlayer}`;\r\n\r\n  function jumpTo(step) {\r\n    const current = gameState.history[step];\r\n    const activeWinner = gameState.winners.some((el) => el !== null);\r\n\r\n    let gameOver = false;\r\n\r\n    if (\r\n      gameState.history[step] ===\r\n        gameState.history[gameState.history.length - 1] &&\r\n      activeWinner\r\n    ) {\r\n      status = `The winner is ${step % 2 ? \"ðŸŸ¢\" : \"ðŸ”´\"}`;\r\n      gameOver = true;\r\n    } else {\r\n      status = `The next player is ${step % 2 ? \"ðŸ”´\" : \"ðŸŸ¢\"}`;\r\n    }\r\n\r\n    setGameState((previousState) => {\r\n      return {\r\n        ...previousState,\r\n        stepNumber: step,\r\n        greenIsNext: step % 2 === 0,\r\n        current: current,\r\n        btnBoldIndex: step,\r\n        status: status,\r\n        gameOver: gameOver,\r\n        winningSquares: false,\r\n      };\r\n    });\r\n  }\r\n\r\n  function handleClick(coords) {\r\n    let winningSquares = false;\r\n    if (gameState.gameOver) {\r\n      return;\r\n    }\r\n    let history = gameState.history.slice(0, gameState.stepNumber + 1);\r\n    let coordinates = gameState.coordinates.slice(0, gameState.stepNumber + 1);\r\n    let current = history[history.length - 1];\r\n\r\n    let winners = gameState.winners.slice(0, gameState.stepNumber + 2);\r\n\r\n    const squares = current.squares.map((arr) => arr.slice());\r\n    const potentialWinner = gameState.greenIsNext ? \"ðŸŸ¢\" : \"ðŸ”´\";\r\n\r\n    if (squares[coords.i][coords.y]) {\r\n      return;\r\n    }\r\n\r\n    squares[coords.i][coords.y] = potentialWinner;\r\n\r\n    const winningStatus = calculateWinner(squares, coords, potentialWinner);\r\n    const gameOver = winningStatus[0];\r\n    winningSquares = winningStatus[1];\r\n    const winner = gameOver ? potentialWinner : null;\r\n\r\n    winners = winners.concat([winner]);\r\n\r\n    coordinates.push({ row: coords.i, column: coords.y });\r\n\r\n    let draw = false;\r\n\r\n    let status = winner\r\n      ? `The winner is ${potentialWinner}`\r\n      : `The next player is ${potentialWinner === \"ðŸŸ¢\" ? \"ðŸŸ¢\" : \"ðŸ”´\"}`;\r\n\r\n    if (!winner) {\r\n      const draw = squares.flat().every((el) => el !== null);\r\n      if (draw) {\r\n        status = \"There is a draw\";\r\n      }\r\n    }\r\n\r\n    history = history.concat([\r\n      {\r\n        squares: squares,\r\n      },\r\n    ]);\r\n\r\n    current = history[history.length - 1];\r\n\r\n    setGameState((previousState) => {\r\n      return {\r\n        ...previousState,\r\n        current: current,\r\n        history: history,\r\n        stepNumber: history.length,\r\n        greenIsNext: !gameState.greenIsNext,\r\n        coordinates: coordinates,\r\n        btnBoldIndex: 0,\r\n        winners: winners,\r\n        currentWinner: winner,\r\n        status: status,\r\n        winningSquares: winningSquares,\r\n        gameOver: gameOver,\r\n      };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"gameboard\">\r\n        <GameBoard\r\n          squares={gameState.current.squares}\r\n          numberOfColumns={numberOfColumns}\r\n          numberOfRows={numberOfRows}\r\n          winningSquares={gameState.winningSquares}\r\n          numberOfColumnsAndRows={numberOfColumns}\r\n          onClick={(coord) => {\r\n            if (!gameState.gameover) {\r\n              handleClick(coord);\r\n            }\r\n          }}\r\n        ></GameBoard>\r\n        <SideBar\r\n          btnBoldIndex={gameState.btnBoldIndex}\r\n          coordinates={gameState.coordinates}\r\n          onClick={(step) => jumpTo(step)}\r\n          history={gameState.history}\r\n          squares={gameState.current.squares}\r\n          status={gameState.status}\r\n        ></SideBar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import \"./header.css\";\r\nfunction Header() {\r\n  return <h1>Welcome to Gomoku game ðŸŽ‰ðŸŽ‰ðŸŽ‰</h1>;\r\n}\r\n\r\nexport default Header;\r\n","import { directive } from \"@babel/types\";\nimport \"./App.css\";\nimport Game from \"./components/Game/Game\";\nimport Header from \"./components/Header/header\";\n\nfunction App() {\n  return (\n    <div>\n      <Header></Header>\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}